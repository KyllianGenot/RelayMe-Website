Structure globale du projet :

.
├── .bolt
├── node_modules
├── src
│   ├── components
│   │   ├── CTA.tsx
│   │   ├── Features.tsx
│   │   ├── Footer.tsx
│   │   ├── Header.tsx
│   │   ├── Hero.tsx
│   │   ├── ScrollHandler.tsx
│   │   └── StoreButtons.tsx
│   ├── App.tsx
│   ├── index.css
│   ├── main.tsx
│   └── vite-env.d.ts
├── .gitignore
├── eslint.config.js
├── index.html
├── package-lock.json
├── package.json
├── postcss.config.js
├── tailwind.config.js
├── tsconfig.app.json
├── tsconfig.json
├── tsconfig.node.json
└── vite.config.ts

src/components/CTA.tsx :
import StoreButtons from './StoreButtons';

interface CTAProps {
  id?: string;
}

export default function CTA({ }: CTAProps) {
  return (
    <section className="py-20">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <h2 className="text-3xl font-bold mb-8 gradient-text">
          Rejoignez la communauté RelayMe dès aujourd'hui !
        </h2>
        
        <StoreButtons className="justify-center mb-6" />
        
        <p className="text-[#73777B] text-sm italic">
          Disponible sur iOS et Android
        </p>
      </div>
    </section>
  );
}

src/components/Features.tsx :
import { Plus, Check, Share2 } from 'lucide-react';

interface FeaturesProps {
  id?: string;
}

const features = [
  {
    icon: Plus,
    title: "Ajouter des contacts",
    description: "Ajoutez vos contacts professionnels avec leurs métiers et entreprises en toute simplicité."
  },
  {
    icon: Check,
    title: "Demander une autorisation",
    description: "Protégez la confidentialité en obtenant l'accord avant tout partage de contact."
  },
  {
    icon: Share2,
    title: "Partager facilement",
    description: "Partagez instantanément via SMS ou WhatsApp avec une interface intuitive."
  }
];

export default function Features({ }: FeaturesProps) {
  return (
    <section className="py-20">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 className="text-3xl font-bold mb-12 gradient-text text-center">
          Comment utiliser RelayMe ?
        </h2>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {features.map((feature, index) => (
            <div key={index} className="feature-card p-8">
              <feature.icon className="w-12 h-12 text-[#3F8DF3] mb-4" />
              <h3 className="text-[#3F8DF3] text-xl font-semibold mb-3">
                {feature.title}
              </h3>
              <p className="text-[#73777B]">{feature.description}</p>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
}

src/components/Footer.tsx :
import { Twitter, Linkedin, Instagram } from 'lucide-react';

interface FooterProps {
  id?: string;
}

export default function Footer({ }: FooterProps) {
  return (
    <footer className="py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex flex-col md:flex-row justify-between items-center gap-6">
          <div className="flex items-center">
            <span className="text-xl font-bold">
              <span className="text-[#3F8DF3]">R</span>
              <span className="text-white">elayMe</span>
            </span>
            <span className="text-[#73777B] text-sm ml-4">
              © 2025 RelayMe - Tous droits réservés
            </span>
          </div>
          
          <div className="flex gap-6">
            {['Politique de confidentialité', 'Conditions d\'utilisation', 'Support'].map((item) => (
              <a
                key={item}
                href="#"
                className="text-[#73777B] hover:text-[#3F8DF3] transition-colors duration-200 text-sm"
              >
                {item}
              </a>
            ))}
          </div>
          
          <div className="flex gap-4">
            {[Twitter, Linkedin, Instagram].map((Icon, index) => (
              <a
                key={index}
                href="#"
                className="social-icon"
              >
                <Icon size={24} />
              </a>
            ))}
          </div>
        </div>
      </div>
    </footer>
  );
}

src/components/Header.tsx :
import { useState, useEffect } from 'react';
import { Download, Menu, X } from 'lucide-react';

export default function Header() {
  const [isVisible, setIsVisible] = useState(true);
  const [lastScrollY, setLastScrollY] = useState(0);
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const [showButtonShine, setShowButtonShine] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      const currentScrollY = window.scrollY;

      if (currentScrollY < lastScrollY) {
        setIsVisible(true);
      } else if (currentScrollY > lastScrollY && currentScrollY > 100) {
        setIsVisible(false);
      } else if (currentScrollY === 0) {
        setIsVisible(true);
      }

      setLastScrollY(currentScrollY);
    };

    window.addEventListener('scroll', handleScroll, { passive: true });
    return () => window.removeEventListener('scroll', handleScroll);
  }, [lastScrollY]);

  const triggerButtonShine = () => {
    setShowButtonShine(true);
    setTimeout(() => setShowButtonShine(false), 800);
  };

  return (
    <header 
      className={`fixed w-full z-50 transition-all duration-500 ${
        isVisible ? 'translate-y-0' : '-translate-y-full'
      } header-premium`}
      style={{ top: 0 }}
    >
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-20">
          <div className="flex items-center">
            <span className="text-2xl font-bold">
              <span className="gradient-text">R</span>
              <span className="text-white">elayMe</span>
            </span>
          </div>
          
          <nav className="hidden md:flex space-x-8">
            {['Accueil', 'Fonctionnalités', 'Téléchargements', 'Contact'].map((item) => (
              <a
                key={item}
                href={`#${item.toLowerCase()}`}
                className="nav-link"
              >
                {item}
              </a>
            ))}
          </nav>
          
          {/* Bouton Télécharger en lien */}
          <a 
            href="#telechargements"
            className="header-download-button"
            onMouseEnter={triggerButtonShine}
          >
            <span className={`header-button-shine ${showButtonShine ? 'shine-active' : ''}`}></span>
            <Download size={18} className="mr-2" />
            <span>Télécharger</span>
          </a>
          
          <div className="md:hidden">
            <button 
              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
              className="mobile-menu-button"
            >
              {mobileMenuOpen ? <X size={24} /> : <Menu size={24} />}
            </button>
          </div>
        </div>
      </div>
      
      <div 
        className={`md:hidden transition-all duration-300 ease-in-out overflow-hidden ${
          mobileMenuOpen ? 'max-h-64 opacity-100' : 'max-h-0 opacity-0'
        } mobile-nav-menu`}
      >
        <div className="py-3 px-4 space-y-1">
          {['Accueil', 'Fonctionnalités', 'Téléchargements', 'Contact'].map((item) => (
            <a
              key={item}
              href={`#${item.toLowerCase()}`}
              className="mobile-nav-link"
              onClick={() => setMobileMenuOpen(false)}
            >
              {item}
            </a>
          ))}
        </div>
      </div>
    </header>
  );
}

src/components/Hero.tsx :
import StoreButtons from './StoreButtons';

interface HeroProps {
  id?: string;
}

export default function Hero({ }: HeroProps) {
  return (
    <section className="min-h-[110vh] flex items-center py-20 overflow-hidden">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="grid lg:grid-cols-2 gap-12 items-center">
          <div className="space-y-8">
            <h1 className="text-5xl md:text-6xl font-bold gradient-text leading-tight">
              Un contact. Un clic.
            </h1>
            
            <div className="border-l-4 border-[#3F8DF3] pl-4 my-6">
              <p className="text-xl text-white font-medium">Partager son réseau n'a jamais été aussi simple !</p>
            </div>
            
            <p className="text-[#73777B] text-lg max-w-lg">
              RelayMe révolutionne le partage de contacts professionnels avec confidentialité et simplicité.
            </p>
            
            <div className="pt-2">
              <StoreButtons />
            </div>
          </div>
          
          <div className="relative mt-10 lg:mt-0">
            <div className="relative z-10 floating">
              <img
                src="/screenshot.png"
                alt="RelayMe App Interface"
                className="w-full max-w-lg mx-auto rounded-xl shadow-lg"
              />
            </div>
            <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-[400px] h-[400px] bg-[#3F8DF3]/10 blur-3xl -z-10"></div>
          </div>
        </div>
      </div>
    </section>
  );
}

src/components/ScrollHandler.tsx :
import { useEffect } from 'react';

const ScrollHandler = () => {
  useEffect(() => {
    document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
      anchor.addEventListener('click', function (this: HTMLAnchorElement, e) {
        e.preventDefault();
        const href = this.getAttribute('href');
        if (href && href !== '#') {
          const target = document.querySelector(href);
          if (target) {
            const headerHeight = 80;
            const offsetTop = target.getBoundingClientRect().top + window.scrollY - headerHeight;
            window.scrollTo({
              top: offsetTop,
              behavior: 'smooth'
            });
          }
        }
      });
    });
  }, []);

  return null;
};

export default ScrollHandler;

src/components/StoreButtons.tsx :
import { useState } from 'react';

const StoreButtons = ({ className = "" }) => {
  const [hoverApple, setHoverApple] = useState(false);
  const [hoverGoogle, setHoverGoogle] = useState(false);

  return (
    <div className={`flex flex-wrap gap-6 ${className}`}>
      {/* App Store Button */}
      <a
        href="https://apps.apple.com"
        target="_blank"
        rel="noopener noreferrer"
        className="app-store-button flex items-center justify-between"
        onMouseEnter={() => setHoverApple(true)}
        onMouseLeave={() => setHoverApple(false)}
      >
        <svg viewBox="0 0 24 24" width="32" height="32" fill="currentColor" className="app-store-icon mr-3">
          <path d="M18.71,19.5C17.88,20.74 17,21.95 15.66,21.97C14.32,22 13.89,21.18 12.37,21.18C10.84,21.18 10.37,21.95 9.1,22C7.79,22.05 6.8,20.68 5.96,19.47C4.25,17 2.94,12.45 4.7,9.39C5.57,7.87 7.13,6.91 8.82,6.88C10.1,6.86 11.32,7.75 12.11,7.75C12.89,7.75 14.37,6.68 15.92,6.84C16.57,6.87 18.39,7.1 19.56,8.82C19.47,8.88 17.39,10.1 17.41,12.63C17.44,15.65 20.06,16.66 20.09,16.67C20.06,16.74 19.67,18.11 18.71,19.5M13,3.5C13.73,2.67 14.94,2.04 15.94,2C16.07,3.17 15.6,4.35 14.9,5.19C14.21,6.04 13.09,6.7 11.95,6.61C11.8,5.46 12.36,4.26 13,3.5Z" />
        </svg>
        <div className="app-store-text flex-1 text-center">
          <span className="app-store-label">Télécharger sur</span>
          <span className="app-store-name">App Store</span>
        </div>
        <div className={`app-store-shine ${hoverApple ? 'shine-active' : ''}`}></div>
      </a>

      {/* Google Play Button */}
      <a
        href="https://play.google.com"
        target="_blank"
        rel="noopener noreferrer"
        className="google-play-button flex items-center justify-between"
        onMouseEnter={() => setHoverGoogle(true)}
        onMouseLeave={() => setHoverGoogle(false)}
      >
        <svg viewBox="0 0 24 24" width="32" height="32" fill="currentColor" className="google-play-icon mr-3">
          <path d="M3,20.5V3.5C3,2.91 3.34,2.39 3.84,2.15L13.69,12L3.84,21.85C3.34,21.6 3,21.09 3,20.5M16.81,15.12L6.05,21.34L14.54,12.85L16.81,15.12M20.16,10.81C20.5,11.08 20.75,11.5 20.75,12C20.75,12.5 20.53,12.9 20.18,13.18L17.89,14.5L15.39,12L17.89,9.5L20.16,10.81M6.05,2.66L16.81,8.88L14.54,11.15L6.05,2.66Z" />
        </svg>
        <div className="google-play-text flex-1 text-center">
          <span className="google-play-label">Disponible sur</span>
          <span className="google-play-name">Google Play</span>
        </div>
        <div className={`google-play-shine ${hoverGoogle ? 'shine-active' : ''}`}></div>
      </a>
    </div>
  );
};

export default StoreButtons;

src/App.tsx :
import Header from './components/Header';
import Hero from './components/Hero';
import Features from './components/Features';
import CTA from './components/CTA';
import Footer from './components/Footer';
import ScrollHandler from './components/ScrollHandler';

function App() {
  return (
    <div className="min-h-screen font-['Montserrat']">
      <Header />
      <ScrollHandler />
      <Hero id="accueil" />
      <Features id="fonctionnalites" />
      <CTA id="telechargements" />
      <Footer id="contact" />
    </div>
  );
}

export default App;

src/index.css :
@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

/* ====== STYLES DE BASE ====== */
:root {
  --primary-color: #3F8DF3;
  --primary-light: #6BA6F4;
  --primary-dark: #1C69CB;
  --bg-color: #000812;
  --text-color: #ffffff;
  --text-secondary: #73777B;
  --transition-slow: 700ms;
  --transition-medium: 500ms;
  --transition-fast: 300ms;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  scroll-behavior: smooth;
}

body {
  @apply bg-[#000812] text-white min-h-screen relative overflow-x-hidden;
  font-family: 'Montserrat', sans-serif;
}

/* ====== EFFETS D'ARRIÈRE-PLAN ====== */
body::before {
  content: '';
  @apply fixed inset-0 pointer-events-none;
  background: 
    radial-gradient(800px circle at 20% 30%, rgba(63, 141, 243, 0.07), transparent 40%),
    radial-gradient(600px circle at 80% 60%, rgba(63, 141, 243, 0.05), transparent 40%),
    radial-gradient(900px circle at 50% 100%, rgba(63, 141, 243, 0.06), transparent 40%);
  z-index: -2;
}

/* Étoiles scintillantes */
body::after {
  content: '';
  @apply fixed inset-0 pointer-events-none;
  background-image: 
    radial-gradient(1px 1px at 10% 10%, rgba(255, 255, 255, 0.8), transparent),
    radial-gradient(1px 1px at 20% 30%, rgba(255, 255, 255, 0.7), transparent),
    radial-gradient(1px 1px at 30% 50%, rgba(255, 255, 255, 0.8), transparent),
    radial-gradient(1px 1px at 40% 20%, rgba(255, 255, 255, 0.9), transparent),
    radial-gradient(1px 1px at 55% 35%, rgba(255, 255, 255, 0.7), transparent),
    radial-gradient(1px 1px at 65% 60%, rgba(255, 255, 255, 0.8), transparent),
    radial-gradient(1px 1px at 75% 70%, rgba(255, 255, 255, 0.9), transparent),
    radial-gradient(1px 1px at 85% 15%, rgba(255, 255, 255, 0.7), transparent),
    radial-gradient(1px 1px at 95% 45%, rgba(255, 255, 255, 0.8), transparent);
  opacity: 0.2;
  z-index: -1;
}

/* ====== EFFETS DE BORDURE DÉGRADÉE ====== */
.gradient-border {
  position: relative;
  border-radius: 0.5rem;
  background: linear-gradient(to bottom, rgba(63, 141, 243, 0.3), rgba(63, 141, 243, 0.1));
  padding: 1px;
}

.gradient-border::before {
  content: "";
  position: absolute;
  inset: 0;
  border-radius: 0.5rem;
  padding: 1px;
  background: linear-gradient(to bottom, #3F8DF3, rgba(63, 141, 243, 0.3));
  -webkit-mask: 
    linear-gradient(#fff 0 0) content-box, 
    linear-gradient(#fff 0 0);
  mask: 
    linear-gradient(#fff 0 0) content-box, 
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: xor;
  mask-composite: exclude;
}

/* ====== STYLES DE TEXTE AMÉLIORÉS ====== */
.gradient-text {
  @apply bg-clip-text text-transparent bg-gradient-to-r from-[#3F8DF3] to-[#6BA6F4];
  text-shadow: 0 2px 15px rgba(63, 141, 243, 0.2);
}

h1, h2, h3, h4, h5, h6 {
  @apply font-bold tracking-tight;
}

h1 {
  letter-spacing: -0.025em;
}

p {
  @apply text-[#73777B] leading-relaxed;
}

/* ====== ANIMATIONS ====== */
.floating {
  animation: floating 3s ease-in-out infinite;
}

@keyframes floating {
  0% { transform: translateY(0px); }
  50% { transform: translateY(-10px); }
  100% { transform: translateY(0px); }
}

@keyframes pulse {
  0%, 100% { opacity: 0.8; }
  50% { opacity: 0.4; }
}

@keyframes shine {
  0% { background-position: 200% 0; }
  100% { background-position: -200% 0; }
}

/* ====== STYLE DES BOUTONS APP STORE ====== */
.app-store-button,
.google-play-button {
  position: relative;
  display: flex;
  align-items: center;
  width: 200px;
  height: 64px;
  padding: 0 20px;
  border-radius: 12px;
  overflow: hidden;
  transition: all 0.4s cubic-bezier(0.33, 1, 0.68, 1);
  box-shadow: 0 6px 15px -4px rgba(0, 0, 0, 0.5);
}

.app-store-button {
  background: linear-gradient(135deg, #1a1a1a, #0a0a0a);
  border: 1px solid rgba(255, 255, 255, 0.15);
}

.google-play-button {
  background: linear-gradient(135deg, #1a2246, #0a1020);
  border: 1px solid rgba(63, 141, 243, 0.15);
}

.app-store-button:hover {
  background: linear-gradient(135deg, #2a2a2a, #1a1a1a);
  box-shadow: 0 8px 25px -5px rgba(255, 255, 255, 0.15);
  border: 1px solid rgba(255, 255, 255, 0.25);
}

.google-play-button:hover {
  background: linear-gradient(135deg, #2a3256, #1a2246);
  box-shadow: 0 8px 25px -5px rgba(63, 141, 243, 0.25);
  border: 1px solid rgba(63, 141, 243, 0.25);
}

.app-store-icon {
  color: #ffffff;
}

.google-play-icon {
  color: #ffffff;
}

.app-store-text,
.google-play-text {
  display: flex;
  flex-direction: column;
}

.app-store-label,
.google-play-label {
  font-size: 0.7rem;
  opacity: 0.7;
  font-weight: 400;
  letter-spacing: 0.02em;
  margin-bottom: 2px;
}

.app-store-label {
  color: #b0b0b0;
}

.google-play-label {
  color: #b0c6e6;
}

.app-store-name,
.google-play-name {
  font-size: 1rem;
  font-weight: 600;
  letter-spacing: 0.01em;
}

.app-store-name {
  color: #ffffff;
}

.google-play-name {
  color: #ffffff;
  background: linear-gradient(90deg, #fff, #b0c6e6);
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
}

.app-store-shine,
.google-play-shine {
  position: absolute;
  top: -20%;
  left: -100%;
  width: 80%;
  height: 200%;
  opacity: 0;
  transform: rotate(25deg);
  background: linear-gradient(
    90deg,
    transparent,
    rgba(255, 255, 255, 0.1),
    transparent
  );
  transition: left 0s ease;
}

.shine-active {
  opacity: 1;
  left: 100%;
  transition: left 0.6s ease-in-out;
}

/* Transitions douces pour les interactions */
.app-store-button,
.google-play-button,
.app-store-icon,
.google-play-icon,
.app-store-text,
.google-play-text,
.app-store-label,
.google-play-label,
.app-store-name,
.google-play-name {
  transition: all 0.3s ease;
}

/* Support mobile */
@media (max-width: 480px) {
  .app-store-button,
  .google-play-button {
    width: 100%;
    max-width: 220px;
    padding: 0 15px;
  }
  
  .app-store-icon,
  .google-play-icon {
    width: 20px;
    height: 20px;
  }
}

/* ====== STYLE DES CARTES FEATURE ====== */
.feature-card {
  @apply relative overflow-hidden rounded-xl p-6 transition-all duration-500;
  background: linear-gradient(135deg, rgba(63, 141, 243, 0.08), rgba(63, 141, 243, 0.03));
  backdrop-filter: blur(10px);
  border: 1px solid rgba(63, 141, 243, 0.1);
  box-shadow: 0 4px 20px -2px rgba(0, 8, 18, 0.7);
}

.feature-card::before {
  content: '';
  @apply absolute inset-0 opacity-0 transition-opacity duration-500;
  background: linear-gradient(135deg, rgba(63, 141, 243, 0.12), rgba(63, 141, 243, 0.06));
}

.feature-card:hover::before {
  @apply opacity-100;
}

.feature-card:hover {
  box-shadow: 0 8px 30px -4px rgba(63, 141, 243, 0.25);
  border: 1px solid rgba(63, 141, 243, 0.2);
  background: linear-gradient(135deg, rgba(63, 141, 243, 0.12), rgba(63, 141, 243, 0.06));
}

.feature-card-icon {
  @apply relative flex items-center justify-center h-12 w-12 mb-4 rounded-lg;
  background: linear-gradient(45deg, #3F8DF3, #6BA6F4);
  box-shadow: 0 4px 10px rgba(63, 141, 243, 0.3);
}

.feature-card-icon::before {
  content: '';
  @apply absolute h-full w-full rounded-lg opacity-40 transition-all duration-500;
  background: radial-gradient(circle, rgba(255, 255, 255, 0.9), transparent 70%);
  filter: blur(10px);
}

.feature-card:hover .feature-card-icon::before {
  @apply opacity-60 scale-125;
}

/* ====== STYLE DES ICÔNES SOCIALES ====== */
.social-icon {
  @apply relative p-3 rounded-lg overflow-hidden transition-all duration-300;
  background: linear-gradient(45deg, #3F8DF3, #6BA6F4);
  box-shadow: 0 4px 10px rgba(63, 141, 243, 0.3);
}

.social-icon::before {
  content: '';
  @apply absolute inset-0 opacity-0 transition-opacity duration-300;
  background: linear-gradient(45deg, #6BA6F4, #3F8DF3);
}

.social-icon:hover::before {
  @apply opacity-100;
}

.social-icon::after {
  content: '';
  @apply absolute inset-0 opacity-0 transition-opacity duration-300;
  background: radial-gradient(circle at center, rgba(255, 255, 255, 0.8), transparent 60%);
}

.social-icon:hover::after {
  @apply opacity-30;
}

.social-icon svg {
  @apply relative z-10 text-white;
  filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.3));
}

/* ====== STYLES DE L'EN-TÊTE PREMIUM ====== */
.header-premium {
  position: fixed; /* Utilisation de fixed pour un sticky effect */
  top: 0;
  left: 0;
  right: 0;
  width: 100%;
  z-index: 50;
  background: linear-gradient(180deg, rgba(0, 8, 18, 0.95), rgba(0, 8, 18, 0.85));
  backdrop-filter: blur(10px);
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.4);
  transition: transform var(--transition-medium);
}

.header-premium::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 1px;
  background: linear-gradient(90deg, transparent, rgba(63, 141, 243, 0.5), transparent);
}

.header-premium::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  height: 1px;
  background: linear-gradient(90deg, transparent, rgba(63, 141, 243, 0.2), transparent);
}

/* Navigation links */
.nav-link {
  position: relative;
  color: #B0B5BB;
  font-weight: 500;
  padding: 0.5rem 0;
  transition: color var(--transition-fast);
}

.nav-link:hover {
  color: #ffffff;
}

.nav-link::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  width: 0;
  height: 2px;
  background: linear-gradient(90deg, #3F8DF3, #6BA6F4);
  transition: width var(--transition-fast);
}

.nav-link:hover::after {
  width: 100%;
}

/* Header download button - Inspired by store buttons */
.header-download-button {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0.5rem 1.25rem;
  border-radius: 10px;
  font-weight: 600;
  color: #ffffff;
  background: linear-gradient(135deg, #3F8DF3, #1C69CB);
  border: 1px solid rgba(255, 255, 255, 0.15);
  transition: all var(--transition-fast);
  overflow: hidden;
  box-shadow: 0 4px 12px rgba(28, 105, 203, 0.4);
}

.header-download-button:hover {
  background: linear-gradient(135deg, #4A98FF, #2374D8);
  border: 1px solid rgba(255, 255, 255, 0.25);
  box-shadow: 0 6px 15px rgba(28, 105, 203, 0.5);
}

.header-button-shine {
  position: absolute;
  top: -50%;
  left: -100%;
  width: 60%;
  height: 200%;
  opacity: 0;
  transform: rotate(25deg);
  background: linear-gradient(
    90deg,
    transparent,
    rgba(255, 255, 255, 0.2),
    transparent
  );
  transition: left 0s ease;
}

.header-button-shine.shine-active {
  opacity: 1;
  left: 150%;
  transition: left 0.8s ease-in-out;
}

/* Mobile menu button */
.mobile-menu-button {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0.5rem;
  border-radius: 8px;
  color: #ffffff;
  background: rgba(63, 141, 243, 0.1);
  border: 1px solid rgba(63, 141, 243, 0.2);
  transition: all var(--transition-fast);
}

.mobile-menu-button:hover {
  background: rgba(63, 141, 243, 0.2);
  border-color: rgba(63, 141, 243, 0.3);
}

/* Mobile navigation menu */
.mobile-nav-menu {
  margin: 0 1rem;
  background: rgba(0, 8, 18, 0.95);
  border: 1px solid rgba(63, 141, 243, 0.15);
  border-radius: 10px;
  backdrop-filter: blur(10px);
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
}

.mobile-nav-link {
  display: block;
  padding: 0.75rem 1rem;
  color: #B0B5BB;
  font-weight: 500;
  border-radius: 6px;
  transition: all var(--transition-fast);
}

.mobile-nav-link:hover {
  color: #ffffff;
  background: rgba(63, 141, 243, 0.15);
}

/* ====== EFFETS D'IMAGES ====== */
.image-glow {
  @apply relative;
}

.image-glow::after {
  content: '';
  @apply absolute -inset-4 -z-10 opacity-70;
  background: radial-gradient(circle at center, rgba(63, 141, 243, 0.3), transparent 70%);
  filter: blur(20px);
}

/* ====== STYLES POUR LES FORMULAIRES ====== */
.input-field {
  @apply w-full px-4 py-3 rounded-lg text-white transition-all duration-300;
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(63, 141, 243, 0.15);
  backdrop-filter: blur(4px);
}

.input-field:focus {
  outline: none;
  border-color: rgba(63, 141, 243, 0.5);
  box-shadow: 0 0 0 2px rgba(63, 141, 243, 0.1);
}

/* ====== BOUTONS PRIMAIRES ====== */
.button-primary {
  @apply px-6 py-3 rounded-lg font-semibold relative overflow-hidden transition-all duration-300;
  background: linear-gradient(135deg, #3F8DF3, #6BA6F4);
  box-shadow: 0 4px 14px rgba(63, 141, 243, 0.5);
}

.button-primary::before {
  content: '';
  @apply absolute inset-0 opacity-0 transition-opacity duration-300;
  background: linear-gradient(135deg, #6BA6F4, #3F8DF3);
}

.button-primary:hover {
  transform: translateY(-3px);
  box-shadow: 0 6px 20px rgba(63, 141, 243, 0.6);
}

.button-primary:hover::before {
  @apply opacity-100;
}

.button-primary span {
  @apply relative z-10;
}

/* ====== BOUTONS SECONDAIRES ====== */
.button-secondary {
  @apply px-6 py-3 rounded-lg font-semibold relative overflow-hidden;
  background: transparent;
  border: 1px solid rgba(63, 141, 243, 0.3);
  transition: all 0.3s ease;
}

.button-secondary:hover {
  background: rgba(63, 141, 243, 0.1);
  border-color: rgba(63, 141, 243, 0.5);
  box-shadow: 0 4px 15px rgba(63, 141, 243, 0.2);
}

/* ====== SCROLLBAR PERSONNALISÉE ====== */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: rgba(0, 8, 18, 0.8);
}

::-webkit-scrollbar-thumb {
  background: rgba(63, 141, 243, 0.4);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: rgba(63, 141, 243, 0.6);
}

/* ====== UTILITAIRES ====== */
.glass-panel {
  @apply relative rounded-xl overflow-hidden;
  background: linear-gradient(135deg, rgba(63, 141, 243, 0.05), rgba(63, 141, 243, 0.02));
  backdrop-filter: blur(10px);
  border: 1px solid rgba(63, 141, 243, 0.1);
  box-shadow: 0 4px 20px -2px rgba(0, 8, 18, 0.7);
}

.text-shadow {
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

.hover-lift {
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.hover-lift:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
}

.divider {
  height: 1px;
  background: linear-gradient(90deg, transparent, rgba(63, 141, 243, 0.3), transparent);
}

/* ====== EFFETS DE TEXTE AVANCÉS ====== */
.text-glow {
  text-shadow: 0 0 10px rgba(63, 141, 243, 0.5);
}

.text-gradient-animated {
  background: linear-gradient(90deg, #3F8DF3, #6BA6F4, #3F8DF3);
  background-size: 200% auto;
  animation: gradient 3s linear infinite;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

@keyframes gradient {
  0% { background-position: 0% center; }
  100% { background-position: 200% center; }
}

/* ====== RESPONSIVE ====== */
@media (max-width: 768px) {
  .store-btn {
    @apply w-full max-w-[280px];
  }
  
  .glass-panel {
    backdrop-filter: blur(5px);
  }
}

src/main.tsx :
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import './index.css';

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>
);


.gitignore :
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?


index.html :
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


package.json :
{
  "name": "vite-react-typescript-starter",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "lucide-react": "^0.344.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.1",
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.18",
    "eslint": "^9.9.1",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.11",
    "globals": "^15.9.0",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.3.0",
    "vite": "^5.4.2"
  }
}


postcss.config.js :
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

tailwind.config.js :
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {
      fontFamily: {
        'montserrat': ['Montserrat', 'sans-serif'],
      },
    },
  },
  plugins: [],
};

tsconfig.app.json :
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}

tsconfig.json :
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

tsconfig.node.json :
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}

vite.config.ts :
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  optimizeDeps: {
    exclude: ['lucide-react'],
  },
});